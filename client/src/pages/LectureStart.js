import React, { useContext, useState, useTransition } from 'react'
import {Button, Card, Container, Form, Row, Table,Image} from 'react-bootstrap';
import { NavLink,useLocation, useNavigate } from 'react-router-dom';
import { INTERFACE_ROUTE, LOGIN_ROUTE, REGISTRATION_ROUTE, START_ROUTE } from '../utils/consts';
import { login, registration } from '../http/userAPI';
import { Context } from '..';
import {observer} from 'mobx-react-lite'
import isAuth from '../course/UserCourse'

const LectureStart = observer(() => {
  const {user} = useContext(Context)
  const location =useLocation()
  const history =useNavigate()
  const isLogin=location.pathname===LOGIN_ROUTE

  return (
    <Container className="d-flex justify-content-center"
    >
      {user.isAuth ? <div>
      <h1> Основные сведения</h1>
      <p> Для решения задач анализа Loginom позволяет импортировать данные из различных источников и применять к ним необходимые алгоритмы обработки. Результаты можно просмотреть в самой системе или экспортировать в сторонние приемники данных.</p>
      <p> Таким образом, платформа может использоваться как для создания автономных аналитических решений, так и для разработки модулей, интегрируемых со сторонними системами.</p>
      <p> Одной из основных концепций, на которых базируется платформа Loginom, является Сценарий.</p>
      <p> Сценарий — последовательность действий, которые необходимо провести для анализа данных. Он представляет собой комбинацию узлов обработки данных, настраиваемую пользователем для решения конкретной задачи.</p>
      <p> Узел сценария выполняет отдельную операцию над данными. Перечень возможных операций представлен палитрой готовых компонентов.</p>
      <p> Последовательность обработки задается соединением выхода предыдущего узла сценария с входом последующего. Входом и выходом узла являются входные и выходные порты.</p>
      <Image src='../scenario.png'/>
      <p>Узел сценария выполняет отдельную операцию над данными. Перечень возможных операций представлен палитрой готовых компонентов. Таким образом, компонент является прообразом или шаблоном будущего узла сценария. Для того, чтобы создать узел сценария, выполняющий нужную операцию над данными, необходимо мышью перенести соответствующий компонент из панели компонентов в область построения сценария</p>
      <p> Узлы сценария создаются из компонентов 2-х типов: </p>
      <ul>
        <li>Стандартные компоненты — предоставляются в рамках платформы;</li>
        <li>Производные компоненты — создаются и настраиваются пользователем.</li>
      </ul>
      <p>Производный компонент можно создать из комбинации узлов сценария, реализующих произвольную логику обработки. </p>
      <p> Таким образом, набор средств для реализации различной логики обработки данных не ограничивается стандартными компонентами платформы и может быть расширен самим пользователем.</p>
      <p> Чаще всего для создания производного компонента используется Подмодель.</p>
      <p> Подмодель является специальным узлом, способным включать в себя другие узлы сценария. Реализованная в подмодели логика может быть произвольной, при этом разработчик сценария может рассматривать её как «черный ящик». Подмодель принимает информацию через входные порты, производит обработку и выдает результат на выходные порты. Входные и выходные порты задаются пользователем.</p>
      <p>В состав подмодели могут также включаться и другие подмодели. Вложенность подмоделей друг в друга не ограничена. </p>
      <p> Виды портов узлов сценария:</p>
      <Table bordered hover>
      <tbody><tr>
        <th width="150">Порт</th>
        <th >Описание</th>
    </tr>
    <tr>
        <td><Image src="../table_inactive.svg"/> Таблица</td>
        <td>Представляет собой структурированный набор данных, где все данные упорядочены в двумерную структуру, состоящую из столбцов и строк. В ячейках такой таблицы содержатся элементы данных: строки, числа, даты, логические значения.</td>
    </tr>
    <tr>
        <td><Image src="../variable_inactive.svg"/> Переменные</td>
        <td>Представляют собой объекты, содержащие только одно значение. С помощью специальных компонентов имеется возможность преобразовать данные из таблиц в переменные и обратно.</td>
    </tr>
     <tr>
        <td><Image src="../tree_inactive.svg"/> Дерево</td>
        <td>Представляет собой набор данных в иерархической древовидной структуре.</td>
    </tr>
    <tr>
        <td><Image src="../link_inactive.svg"/> Подключения</td>
        <td>Определяют настройки для работы с внешними источниками и приемниками данных.</td>
    </tr>
</tbody>
</Table>
<Container className='d-flex justify-content-end'>
    <Button 
    variant='success'
    className='mb-3 rounded-5'
    onClick={() => history(INTERFACE_ROUTE)}
    > К следующей лекции</Button>
   </Container>
      </div>
       : 'Пожалуйста, войдите в свой аккаунт или зарегестрируйтесь!'}
    </Container>
  );
});

export default LectureStart;